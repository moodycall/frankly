- k = 0;
- cls = "sametime"
= simple_form_for(@counselor, url: availability_counselor_path(@counselor), html: { method: :put, :id => "specificForm", :class => "form-inline", "data-id" => "specific"}) do |f|
  - if @counselor.availability_dates.present? and @counselor.availability_dates.first.is_specific?
    - @counselor.availability_dates.each do |dates|
      - k += 1
      .row.sametime#specifictime.specifictimecheck.reccurring-padding{"data-name" => "sametime","data-item" => "specifictime#{k}", :class => "specifictime#{k}"}
        .col-sm-5
          .form-group.form-group-reccurring
            %label.label-width Date
            %input.form-control.datepickerField{:name => "counselor[specific][#{k}]availability_dates_attributes[start_date]", :placeholder => "Date", :value => "#{dates.start_date.in_time_zone(timeZone).strftime('%m/%d/%Y')}", :onkeypress => "return restrictedField();"}
        .col-sm-2.text-right
          %button.btn-primary.add-button{:type => "button", :onclick => "addNewDate('specific');"} +
      .row.reccurring-padding.reccurring-sub-row.time_pair{:class => "#{cls} specifictime#{k}"}
        .reccurring-day-text
          = "Schedule for #{dates.start_date.in_time_zone(timeZone).strftime('%A')}"
      - n = 0
      - dates.availability_intervals.where(:day_of_week => dates.start_date.in_time_zone(timeZone).strftime('%w')).each do |time|
        - n += 1
        .row.reccurring-padding.reccurring-sub-row.time_pair{:class => "#{cls} specifictime#{k}"}
          .col-sm-5{:class => "#{cls}"}
            .form-group.form-group-reccurring
              %label.label-width Start
              %input.date-width.form-control.time{:name => "counselor[specific][#{k}][availability_intervals_attributes][0][#{n}][start_time]", :placeholder => "Start time", :value => DateTime.parse("#{time.start_time}").strftime("%I:%M%P"), :onkeypress => "return restrictedField();"}
          .col-sm-5{:class => "#{cls}"}
            .form-group.form-group-reccurring
              %label.label-width End
              %input.date-width.form-control.time{:name => "counselor[specific][#{k}][availability_intervals_attributes][0][#{n}][end_time]", :placeholder => "End time", :value => DateTime.parse("#{time.end_time}").strftime("%I:%M%P"), :onkeypress => "return restrictedField();"}
          .col-sm-2.text-right{:class => "#{cls}"}
            - if n == 1
              %button.btn-primary.add-button{:type => "button", "data-name" => "#{cls}", "data-item" => "specifictime#{k}", :onclick => "addNewTime(this,0);"}+
            - else
              %button.btn-primary.add-button{:type => "button", :class => "#{cls}", :onclick => "removeTime(this);"}x
  - else
    - k += 1
    - n = 1
    .row.sametime#specifictime.specifictimecheck{"data-name" => "sametime","data-item" => "specifictime#{k}", :class => "specifictime#{k}"}
      .col-sm-5
        .form-group.form-group-reccurring
          %label.label-width Date
          %input.form-control.datepickerField{:name => "counselor[specific][#{k}]availability_dates_attributes[start_date]", :placeholder => "Date", :value => "#{Date.today.strftime('%m/%d/%Y')}", :onkeypress => "return restrictedField();"}
      .col-sm-2.text-right
        %button.btn-primary.add-button{:type => "button", :onclick => "addNewDate('specific');"} +
    .row.reccurring-padding.reccurring-sub-row.time_pair{:class => "#{cls} specifictime#{k}"}
      .reccurring-day-text
        = "Schedule for the day"
    .row.reccurring-padding.reccurring-sub-row.time_pair{:class => "#{cls} specifictime#{k}"}
      .col-sm-5{:class => "#{cls}"}
        .form-group.form-group-reccurring
          %label.label-width Start
          %input.date-width.form-control.time{:name => "counselor[specific][#{k}][availability_intervals_attributes][0][#{n}][start_time]", :placeholder => "Start time", :value => "", :onkeypress => "return restrictedField();"}
      .col-sm-5{:class => "#{cls}"}
        .form-group.form-group-reccurring
          %label.label-width End
          %input.date-width.form-control.time{:name => "counselor[specific][#{k}][availability_intervals_attributes][0][#{n}][end_time]", :placeholder => "End time", :value => "", :onkeypress => "return restrictedField();"}
      .col-sm-2.text-right{:class => "#{cls}"}
        %button.btn-primary.add-button{:type => "button", "data-name" => "#{cls}", "data-item" => "specifictime#{k}", :onclick => "addNewTime(this,0);"}+
  .row.form-submit
    .col-sm-12.reccurring-padding.text-right
      %input{:type => "hidden", :value => "specific", :name => "counselor[availability]"}
      %button.btn-primary.btn{:type => "submit"}
        Submit
#specificCount{:value => k, :type => "hidden"}