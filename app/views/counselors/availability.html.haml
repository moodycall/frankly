.container
  .row
    .col-sm-10.col-sm-offset-1.col-md-8.col-md-offset-2
      %h1 Availability

      = simple_form_for(@counselor) do |f|
        = f.error_notification

        .form-inputs
          #counselor_availability_container
            .form-group
              = f.input :advanced_scheduling_in_weeks, as: :string, :label => false, input_html: { :class => "form-control floatlabel"}, :placeholder => "How many weeks in advance can a client schedule a session?"
            #monday_row.row.availability_day_wrapper{:class => (@counselor.available_monday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Monday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_monday, :label => "Available"
                  %li
                    #monday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#monday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #monday_intervals_wrapper.intervals_wrapper.table-responsive
                  %table#monday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 1).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 1
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_monday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#monday_interval_table", "data-day-value" => "1"} Add Interval

            #tuesday_row.row.availability_day_wrapper{:class => (@counselor.available_tuesday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Tuesday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_tuesday, :label => "Available"
                  %li
                    #tuesday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#tuesday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #tuesday_intervals_wrapper.intervals_wrapper
                  %table#tuesday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 2).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 2
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_tuesday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#tuesday_interval_table", "data-day-value" => "2"} Add Interval

            #wednesday_row.row.availability_day_wrapper{:class => (@counselor.available_wednesday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Wednesday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_wednesday, :label => "Available"
                  %li
                    #wednesday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#wednesday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #wednesday_intervals_wrapper.intervals_wrapper
                  %table#wednesday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 3).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 3
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_wednesday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#wednesday_interval_table", "data-day-value" => "3"} Add Interval

            #thursday_row.row.availability_day_wrapper{:class => (@counselor.available_thursday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Thursday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_thursday, :label => "Available"
                  %li
                    #thursday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#thursday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #thursday_intervals_wrapper.intervals_wrapper
                  %table#thursday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 4).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 4
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_thursday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#thursday_interval_table", "data-day-value" => "4"} Add Interval

            #friday_row.row.availability_day_wrapper{:class => (@counselor.available_friday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Friday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_friday, :label => "Available"
                  %li
                    #friday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#friday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #friday_intervals_wrapper.intervals_wrapper
                  %table#friday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 5).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 5
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_friday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#friday_interval_table", "data-day-value" => "5"} Add Interval

            #saturday_row.row.availability_day_wrapper{:class => (@counselor.available_saturday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Saturday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_saturday, :label => "Available"
                  %li
                    #saturday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#saturday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #saturday_intervals_wrapper.intervals_wrapper
                  %table#saturday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 6).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 6
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_saturday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#saturday_interval_table", "data-day-value" => "6"} Add Interval

            #sunday_row.row.availability_day_wrapper{:class => (@counselor.available_sunday ? nil : "unavailable")}
              .col-sm-6
                .availability_day_title Sunday
              .col-sm-6
                %ul.list-inline.pull-right
                  %li
                    = f.input :available_sunday, :label => "Available"
                  %li
                    #sunday_intervals_edit_btn.interval_trigger.btn.btn-default{"data-trigger" => "#sunday_intervals_wrapper"}
                      .fa.fa-pencil
              .col-xs-12
                #sunday_intervals_wrapper.intervals_wrapper
                  %table#sunday_interval_table.daily_availability_intervals_table.table
                    %tr
                      %th
                        From
                      %th
                      %th
                        To
                      %th
                    - @counselor.availability_intervals.where(:day_of_week => 0).each do |i|
                      = f.fields_for :availability_intervals, i do |a|
                        %tr.time_pair
                          %td.hidden
                            = a.input :day_of_week, :value => 0
                            = a.input :timezone_name, :input_html => {:value => "#{Time.zone.name}"}
                          %td
                            = a.input :start_time, :as => :string, input_html: { :class => "form-control time start", value: DateTime.parse("#{a.object.start_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            –
                          %td
                            = a.input :end_time, :as => :string, input_html: { :class => "form-control time end", value: DateTime.parse("#{a.object.end_time}").in_time_zone.strftime("%I:%M%P") }, :label => false
                          %td
                            .remove_row
                              x
                  #add_sunday_interval_btn.add_interval_btn.btn.btn-primary.btn-block.btn-lg{"data-append" => "#sunday_interval_table", "data-day-value" => "0"} Add Interval


            .form-actions
              = f.submit "Save Availability", :class => "btn btn-primary btn-block btn-lg"

:javascript

  i = #{@counselor.availability_intervals.count};

  $('.add_interval_btn').click(function(){
    target_wrapper = $(this).attr('data-append');
    target_day = $(this).attr("data-day-value");

    $(target_wrapper).append("<tr class='time_pair'><td class='hidden'><input id='counselor_availability_intervals_attributes_"+i+"_day_of_week' name='counselor[availability_intervals_attributes]["+i+"][day_of_week]' type='hidden' value=" + target_day + "></td><td><div class='input string optional counselor_availability_intervals_start_time'><input class='string optional form-control time start' id='counselor_availability_intervals_attributes_"+i+"_start_time' name='counselor[availability_intervals_attributes]["+i+"][start_time]' type='text' autocomplete='off'></div></td><td>–</td><td><div class='input string optional counselor_availability_intervals_end_time'><input class='string optional form-control time end' id='counselor_availability_intervals_attributes_"+i+"_end_time' name='counselor[availability_intervals_attributes]["+i+"][end_time]' type='text' autocomplete='off'></div></td><td><span class='remove_row'>x</span></td></tr>");

    i = i + 1;

    $('.time_pair .time').timepicker({
      showDuration: true,
      maxTime: '11:59pm'
    });

    $('.time_pair').datepair();
  });

  $(document).ready(function() {
    $(".daily_availability_intervals_table").on("click", ".remove_row", function() {
      var tr = $(this).closest('tr');
      tr.css("background-color","#F00");

      tr.fadeOut(400, function(){
        tr.remove();
      });
      return false;
    });
  });
