- counselorDisabled = true
- if @counselor.is_active?
  - counselorDisabled = false
.container
  %h1 Upcoming Payouts
  .row
    .col-md-8
      .table-responsive
        %table.table
          %thead
            %tr
              %th User
              %th Stripe recipient ID
              %th.text-right Sessions
              %th.text-right Total
              %th
              
          %tbody
            - @payouts.each do |payout|
              %tr
                %td= payout.user.name
                %td
                  - if payout.user.stripe_recipient_id.present?
                    = payout.user.stripe_recipient_id
                  - else 
                    %em.text-muted
                      Banking Info Required
                %td.text-right= payout.counseling_sessions.count
                %td.text-right= number_to_currency(payout.total_in_dollars)
                %td.text-right
                  = link_to 'Show', payout, :class => "btn btn-default btn-sm"
                  / = link_to 'Edit', edit_payout_path(payout)

          %tfooter
            %th
            %th
            %th.text-right
              Totals
            %th.text-right
              = @payouts.total_sessions_payable
            %th.text-right
              = number_to_currency(@payouts.total_funds_payable_in_dollars)
            %th
                  
    .col-md-4
      = render "counselors/navigation"
      .clearfix
      %h2 Bank Details

      .well
        %p
          Enter banking information below to receive your payouts as direct deposits every 2nd week after a month of sessions.
        = simple_form_for(@counselor, url: update_bank_counselor_path(@counselor), html: { method: :put, :id => "bank_details_wrapper" }) do |f|
          .payment-errors.alert.alert-danger.hidden-default
          %br
          #bank_details_wrapper
            .form-group.hidden-default
              %input.form-control.floatlabel.bankformitem.country{:placeholder => "Country Code", :value => "US"}
            .form-group
              =  select_tag :type, options_for_select([ ["Type",""], ["Individual","individual"], ["Company","company"] ], disabled:"", selected:""), :class => "form-control bankformitem", :label => false, :include_blank => false, :onChange => "getTaxID(this)", :disabled => counselorDisabled
            .form-group#business_name
              %input.form-control.floatlabel.account-name{:name => "business_name", :placeholder => "Business Name"}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-name{:name => "first_name", :placeholder => "First Name", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-name{:name => "last_name", :placeholder => "Last Name", :disabled => counselorDisabled}
            .form-group.dob
              %input.form-control.floatlabel.bankformitem.account-name{:name => "day", :placeholder => "Day", :disabled => counselorDisabled}
            .form-group.dob
              %input.form-control.floatlabel.bankformitem.account-name{:name => "month", :placeholder => "Month", :disabled => counselorDisabled}
            .form-group.dob
              %input.form-control.floatlabel.bankformitem.account-name{:name => "year", :placeholder => "Year", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-name{:name => "address", :placeholder => "Address Line 1", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-name{:name => "city", :placeholder => "City", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-name{:name => "state", :placeholder => "State", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-name{:name => "postal_code", :placeholder => "Zip", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-taxid{:name => "ssn", :placeholder => "SSN", :disabled => counselorDisabled}
            .form-group#ein
              %input.form-control.floatlabel.account-taxid{:name => "ein", :placeholder => "EIN", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.routing-number{:placeholder => "Routing Number", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-number{:placeholder => "Account Number", :disabled => counselorDisabled}
            .form-group
              %input.form-control.floatlabel.bankformitem.account-email{:name => "email", :placeholder => "Email Address", :value => @counselor.user.email, :disabled => counselorDisabled}
            %input{:name => "ip", :type => "hidden", :value => request.remote_ip}
            %input{:name => "date", :type => "hidden", :value => Time.now.to_time.to_i}
          = submit_tag "Submit Bank Credentials", :class => "btn btn-primary btn-block btn-lg", :disabled => counselorDisabled
        - if counselorDisabled
          #below-text
            Bank credentials can not be submitted until your account has been approved and activated by MoodyCall.

:javascript
  // This identifies your website in the createToken call below
  Stripe.setPublishableKey("#{Rails.configuration.stripe[:publishable_key]}");

  var stripeResponseHandler = function(status, response) {
      var $form = $('#bank_details_wrapper');

      if (response.error) {
        // Show the errors on the form
        $form.find('.payment-errors').slideDown().text(response.error.message);
        $form.find('button').prop('disabled', false);
      } else {
        // token contains id, last4, and card type
        var token = response.id;
        // Insert the token into the form so it gets submitted to the server
        $form.append($('<input type="hidden" name="stripeToken" />').val(token));
        // and re-submit
        $form.get(0).submit();
      }
    };

    jQuery(function($) {
      $('#bank_details_wrapper').submit(function(e) {
        var $form = $(this);

        // Disable the submit button to prevent repeated clicks
        $form.find('button').prop('disabled', true);

        if(validateBankDetails(this)){

          Stripe.bankAccount.createToken({
            country: $('.country').val(),
            routingNumber: $('.routing-number').val(),
            accountNumber: $('.account-number').val()
          }, stripeResponseHandler);
        }

        // Prevent the form from submitting with the default action
        return false;
      });
    });

    function getTaxID(obj){
      if($(obj).val() == "individual"){
        $("#business_name").hide().find('input').removeClass('bankformitem');
        $("#ein").hide().find('input').removeClass('bankformitem');
      }else{
        $("#business_name").show().find('input').addClass('bankformitem');
        $("#ein").show().find('input').addClass('bankformitem');
      }
    }

    function validateBankDetails(form){
      var valid = true;
      $(form).find(".bankformitem").each(function(){
        if($(this).val() == null || $(this).val() == ""){
          valid = false;
          $(this).css("border","1px solid red")
        }
      });
      if(valid == false){
        $(form).find('.payment-errors').slideDown().text("Please fill out all fields");
      }else{
        $(form).find('.payment-errors').slideUp().text("");
      }
      return valid;
    }

    $(".bankformitem").change(function(){
      if($(this).val() != null || $(this).val() == ""){
        $(this).css("border","1px solid #CCC")
      }
    });